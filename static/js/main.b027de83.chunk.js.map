{"version":3,"sources":["axios.js","Fullpost.js","main.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Fullpost","state","loadedpost","this","props","id","Axios","get","then","response","setState","data","console","log","post","title","Component","Main","posts","selectedpost","error","postHandler","updatedposts","slice","map","authour","catch","onClick","App","className","Boolean","window","location","hostname","match","defaults","headers","interceptors","request","use","Promise","reject","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0TAMeA,EAJEC,IAAMC,OAAO,CAC1BC,QAAS,yCCoCEC,E,2MAnCfC,MAAM,CACFC,WAAW,M,oFAGM,IAAD,OACbC,KAAKC,MAAMC,MACNF,KAAKF,MAAMC,YAAeC,KAAKF,MAAMC,YAAcC,KAAKF,MAAMC,WAAWG,KAAOF,KAAKC,MAAMC,KAC3FC,EAAMC,IAAI,UAAYJ,KAAKC,MAAMC,IAChCG,KAAK,SAAAC,GACF,EAAKC,SAAS,CAACR,WAAYO,EAASE,OACpCC,QAAQC,IAAIJ,O,+BAQpB,IAAIK,EAAO,gDAaX,OAZGX,KAAKC,MAAMC,KACTS,EAAO,yCAERF,QAAQC,IAAIV,KAAKC,MAAMC,KACpBF,KAAKF,MAAMC,aAEjBY,EAAS,6BACN,4BAAKX,KAAKF,MAAMC,WAAWa,OAC3B,2BAAIZ,KAAKF,MAAMC,WAAWG,MAIvBS,M,GAhCQE,a,gOC+CRC,E,2MA7CfhB,MAAM,CACFiB,MAAM,GACNC,aAAa,KACbC,OAAM,G,EAoBNC,YAAc,SAAChB,GACX,EAAKK,SAAS,CAACS,aAAad,K,mFAlBV,IAAD,OACjBR,EAAMU,IAAI,UACTC,KAAK,SAAAC,GACF,IACMa,EADQb,EAASE,KAAKY,MAAM,EAAE,GACTC,IAAI,SAAAV,GAC3B,O,qVAAA,IACOA,EADP,CACYW,QAAQ,SAGxB,EAAKf,SAAS,CAACQ,MAAQI,MAExBI,MAAM,SAAAN,GACLR,QAAQC,IAAIO,GACZ,EAAKV,SAAS,CAACU,OAAM,Q,+BAOpB,IAAD,OACAF,EAAQ,mDAMZ,OALIf,KAAKF,MAAMmB,QACdF,EAAQf,KAAKF,MAAMiB,MAAMM,IAAI,SAAAV,GAC1B,OAAO,iCAAM,4BAASa,QAAS,kBAAK,EAAKN,YAAYP,EAAKT,MAA7C,cAAqE,2BAAKS,EAAKC,MAAV,IAAkBD,EAAKW,QAAvB,IAAiCX,EAAKT,QAIxH,6BACI,oCACHa,EACT,iCACI,kBAAC,EAAD,CAAUb,GAAIF,KAAKF,MAAMkB,qB,GAvCdH,aCUJY,MARf,WACE,OACE,yBAAKC,UAAU,OACd,kBAAC,EAAD,QCGeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNrC,IAAMsC,SAASpC,QAAU,uCAGzBF,IAAMsC,SAASC,QAAQtB,KAAK,gBAAkB,mBAE9CjB,IAAMwC,aAAaC,QAAQC,IAAI,SAAAD,GAG3B,OAFA1B,QAAQC,IAAIyB,GAELA,GACT,SAAAlB,GAEE,OADAR,QAAQC,IAAIO,GACLoB,QAAQC,OAAOrB,KAG1BvB,IAAMwC,aAAa5B,SAAS8B,IAAI,SAAA9B,GAG5B,OAFAG,QAAQC,IAAIJ,GAELA,GACT,SAAAW,GAEE,OADAR,QAAQC,IAAIO,GACLoB,QAAQC,OAAOrB,KAM1BsB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD+F3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC,iB","file":"static/js/main.b027de83.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL :'https://jsonplaceholder.typicode.com'\n});\n\nexport default instance;","import React,{Component} from 'react';\nimport Axios from './axios';\n\nclass Fullpost extends Component{\nstate={\n    loadedpost:null\n}\n\ncomponentDidUpdate(){\n    if(this.props.id){\n        if(!this.state.loadedpost || (this.state.loadedpost && this.state.loadedpost.id !== this.props.id)){\n            Axios.get('/posts/' + this.props.id)\n            .then(response => {\n                this.setState({loadedpost: response.data});\n                console.log(response);\n            });\n        }\n       \n    }\n}\n\n    render(){\n        let post = <p>please select one</p>\n        if(this.props.id){\n             post = <p>Loading...</p>\n\n            console.log(this.props.id);}\n            if(this.state.loadedpost){\n\n         post =(  <div>\n            <h1>{this.state.loadedpost.title}</h1>\n            <p>{this.state.loadedpost.id}</p>\n        </div>\n          )\n        }\n        return post;\n    }\n    }\n\nexport default Fullpost;","import React,{Component} from 'react';\nimport axios from '../src/axios';\nimport Fullpost from './Fullpost';\n\nclass Main extends Component{\nstate={\n    posts:[],\n    selectedpost:null,\n    error:false\n}\n\n    componentDidMount () {\n        axios.get('/posts')\n        .then(response =>{\n            const posts = response.data.slice(0,4);\n            const updatedposts = posts.map(post =>{\n                return{\n                    ...post,authour:\"kk\"\n                }\n            });\n            this.setState({posts : updatedposts});\n           // console.log(response);\n        }).catch(error => {\n            console.log(error);\n            this.setState({error:true});\n        })\n    }\n\n    postHandler = (id) =>{\n        this.setState({selectedpost:id});\n    }\n    render(){\n        let posts = <p>Something went wrong</p>\n        if(!this.state.error){\n         posts = this.state.posts.map(post => {\n            return <div> <button  onClick={() =>this.postHandler(post.id)}>click here</button><p >{post.title} {post.authour} {post.id}</p></div>\n        })\n    }\n        return(\n            <div>\n                <h1>main</h1>\n            {posts}\n    <section>\n        <Fullpost id={this.state.selectedpost}/>\n    </section>\n            </div>\n        )\n    };\n}\n\nexport default Main","import React from 'react';\nimport './App.css';\nimport Main from '../src/main';\n\n// Make a request for a user with a given ID\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport axios from 'axios';\n\n\naxios.defaults.baseURL = 'https://jsonplaceholder.typicode.com';\n\n// axios.defaults.headers.common['Authorization'] = 'AUTH TOKEN';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\naxios.interceptors.request.use(request => {\n    console.log(request);\n    //edit req config\n    return request;\n},error => {\n    console.log(error);\n    return Promise.reject(error);\n});\n\naxios.interceptors.response.use(response => {\n    console.log(response);\n    //edit req config\n    return response;\n},error => {\n    console.log(error);\n    return Promise.reject(error);\n});\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}